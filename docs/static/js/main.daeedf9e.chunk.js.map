{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EApCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAkBzC,OACI,uBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAIlB,UACI,8CACA,uBACIO,KAAO,OACPC,MAAUT,EACVU,SApBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,c,+BCRfG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWR,GAF/C,+DAGAS,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CAEHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCWTO,EAXK,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAE/B,OACI,sBAAKc,UAAW,yCAAhB,UACI,qBAAKC,IAAOf,EAAMgB,IAAON,IACzB,kCAAMA,EAAN,WCsCGO,EAvCC,SAAC,GAAoB,IAAjBxB,EAAgB,EAAhBA,SAAgB,ECHR,SAACA,GAAc,IAAD,EAEZR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAjBAC,qBAAU,WAGNvB,EAAQL,GACH6B,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACzB,IAIG0B,EDf0BK,CAAc/B,GAAlCkB,EANmB,EAMxBN,KAAaa,EANW,EAMXA,QAUrB,OACI,qCACI,qBAAIJ,UAAU,mCAAd,cAAoDrB,EAApD,OAEEyB,GAAW,mBAAGJ,UAAU,wCAAb,qBAGb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAEC,GAAF,OACJ,cAAC,EAAD,eAESA,GADGA,EAAIC,aEK7BgB,EAnCM,WAAO,IAAD,EAIaxC,mBAAS,CAAC,aAJvB,mBAIhByC,EAJgB,KAIJ1C,EAJI,KAavB,OACI,qCACI,8CACA,cAAC,EAAD,CACIA,cAAkBA,IAEtB,uBAGA,6BAEQ0C,EAAWnB,KAAK,SAAAd,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,YCjBrBkC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.daeedf9e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n\r\n            setCategories( category => [ inputValue, ...category ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit = { handleSubmit } >\r\n            <h2>Add Category</h2>\r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\n\r\n\r\nexport default AddCategory;\r\n\r\n\r\n\r\n","\r\n\r\n    export const getGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=f11neIMkRk6ZT86fn56A29oL41bDwI9C`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react';\r\n\r\nconst GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div className= \"card animate__animated animate__bounce\">\r\n            <img src= { url } alt= { title } /> \r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifts';\r\n\r\nimport GifGridItem from '../components/GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ( { category } ) => {\r\n\r\n    // const [count, setCount] = useState(0)\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    // }, [ category ])\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__flash\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__fadeInLeft\">Loading</p>}\r\n\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( ( img ) => (\r\n                            <GifGridItem\r\n                                key = { img.id }\r\n                                { ...img } />\r\n                        ))\r\n                }  \r\n\r\n                {/* <h3> { count } </h3>\r\n                <button onClick = { () => setCount( count + 1 ) } ></button> */}    \r\n            </div>\r\n        </>        \r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n\r\n            });\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n\r\n\r\n\r\n    const [categories, setCategories] = useState(['Valorant'])\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     setCategories( [...categories, 'Titan'] );\r\n    //     setCategories( cats => [ ...cats, 'Titan' ] );\r\n       \r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory \r\n                setCategories = { setCategories }\r\n            />\r\n            <hr />\r\n\r\n            {/* <button onClick = { handleAdd }>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category } />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}